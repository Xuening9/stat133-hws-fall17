return("radius cannot be negative")
}
pi * r^2
}
circle_area()
circle_area(2)
pythagoras <- function(a,b,na.rm = FALSE){
if (na.rm){
b <- b[!is.na(b)]
}
sqrt((a*a)+(b*b))
}
pythagoras(5)
pythagoras <- function(a,b=0){
sqrt((a*a)+(b*b))
}
pythagoras(5)
circle_area(-2)
cylinder_area(1,-2)
cylinder_area <- function(r = 1,h = 1){
if(r < 0 | h < 0){
return("radius and height cannot be negative")
}
2 * pi * r * h + 2 * pi * r^2
}
cylinder_area(1,-2)
cylinder_area(1,2)
cylinder_area <- function(r = 1,h = 1){
if(r < 0 | h < 0){
return("radius and height cannot be negative")
}
2 * pi * r * h + circle_area(r)
}
cylinder_area(1,-2)
cylinder_area(1,2)
cylinder_area()
cylinder_volume(1,-2)
cylinder_volume <- function(r = 1, h = 1){
if(r < 0 | h < 0){
return("radius and height cannot be negative")
}
circle_area(r)*h
}
cylinder_volume(1,-2)
mk_table <- data.frame(
miles = c(seq(1,10,1),seq(10,100,10)),
kms = miles2kms(miles)
)
miles2kms <- function(m = 1){
k <- m*1.6
return(k)
}
mk_table <- data.frame(
miles = c(seq(1,10,1),seq(10,100,10)),
kms = miles2kms(miles)
)
mk_table <- data.frame(
miles <-  c(seq(1,10,1),seq(10,100,10)),
kms x <-  miles2kms(miles)
mk_table <- data.frame(
miles =  c(seq(1,10,1),seq(10,100,10)),
kms x =  miles2kms(miles)
mk_table <- data.frame(
miles =  c(seq(1,10,1),seq(10,100,10)),
kms =  miles2kms(miles)
)
miles =  c(seq(1,10,1),seq(10,100,10))
mk_table <- data.frame(
miles,
kms =  miles2kms(miles)
)
mk_table
gaussian <- function(x,m,s){
(1/(s*(sqrt(2*pi))))*exp(-((x-m)/2)^2/2)
}
gaussian(1,0,2)
x_values <- seq(from = -4.5, to = 4.5, by = 0.1)
y_values <- gaussian(x_values,0,2)
plot(x_values,y_values,las = 1, type = "l", lwd = 2)
poly1 <- function(x) {
x^3
}
x <- seq(-4, 4, length.out = 20)
y <- poly1(x)
# graph polynomial
plot(x, y, type = 'l', lwd = 3, col = "#FB7215", las = 1)
abline(h = 0, v = 0, col = '#888888aa', lwd = 1.5)
title(main = expression(paste(f(x), ' = ', x^3)))
#f(x)=(x^2−1)(x+3)^3
poly2 <- function(x) {
(x^2−1)(x+3)^3
poly2 <- function(x) {
(x^2-1)(x+3)^3
}
# set of points
x <- seq(-4, 4, length.out = 20)
y <- poly2(x)
y <- poly2(x)
x <- seq(-4, 4, length.out = 20)
y <- poly2(x)
poly2 <- function(x) {
(x^2-1)(x+3)^3
}
# set of points
x <- seq(-4, 4, length.out = 20)
y <- poly2(x)
x <- seq(-4, 4, length.out = 20)
y <- poly1(x)
x <- seq(-4, 4, length.out = 20)
y <- poly2(x)
poly2 <- function(x) {
((x^2)-1)(x+3)^3
x <- seq(-4, 4, length.out = 20)
y <- poly2(x)
plot(x, y, type = 'l', lwd = 3, col = "#FB7215", las = 1)
abline(h = 0, v = 0, col = '#888888aa', lwd = 1.5)
title(main = expression(paste(f(x), ' = ', (x^2-1)(x+3)^3)))
# graph polynomial
plot(x, y, type = 'l', lwd = 3, col = "#FB7215", las = 1)
abline(h = 0, v = 0, col = '#888888aa', lwd = 1.5)
title(main = expression(paste(f(x), ' = ', (x^2-1)(x+3)^3)))
plot(x, y, type = 'l', lwd = 3, col = "#FB7215", las = 1)
abline(h = 0, v = 0, col = '#888888aa', lwd = 1.5)
title(main = expression(paste(f(x), ' = ', x^3)))
poly2 <- function(x) {
((x^2)-1)(x+3)^3
}
# set of points
x <- seq(-4, 4, length.out = 20)
y <- poly2(x)
# graph polynomial
plot(x, y, type = 'l', lwd = 3, col = "#FB7215", las = 1)
abline(h = 0, v = 0, col = '#888888aa', lwd = 1.5)
title(main = expression(paste(f(x), ' = ', (x^2-1)(x+3)^3)))
poly1 <- function(x) {
x^3
}
# set of points
x <- seq(-4, 4, length.out = 20)
y <- poly1(x)
# graph polynomial
plot(x, y, type = 'l', lwd = 3, col = "#FB7215", las = 1)
abline(h = 0, v = 0, col = '#888888aa', lwd = 1.5)
title(main = expression(paste(f(x), ' = ', x^3)))
poly3 <- function(x) {
((x^2)-1)((x^2)-9)
}
# set of points
x <- seq(-4, 4, length.out = 20)
y <- poly3(x)
# graph polynomial
plot(x, y, type = 'l', lwd = 3, col = "#FB7215", las = 1)
abline(h = 0, v = 0, col = '#888888aa', lwd = 1.5)
title(main = expression(paste(f(x), ' = ', ((x^2)-1)((x^2)-9))))
??first quartile
descriptive <- function(x) {
min <- function(n) which.min(v)
q1 <- function(q) {
quantile(q,0.25)
}
median <- function(p){
median(p)
}
mean <- function(y){
mean(y)
}
q3 <- function(t){
quantile(t,0.75)
}
max <- function(m) which.max(u)
range <- max(x)-min(x)
#iqr <-
#sd <-
list(min(x),qi(x),median(x),mean(x),q3(x),max(x),range(x))
}
poly1 <- function(x) {
x^3
}
# set of points
x <- seq(-4, 4, length.out = 20)
y <- poly1(x)
# graph polynomial
plot(x, y, type = 'l', lwd = 3, col = "#FB7215", las = 1)
abline(h = 0, v = 0, col = '#888888aa', lwd = 1.5)
title(main = expression(paste(f(x), ' = ', x^3)))
poly3 <- function(x) {
((x^2)-1)((x^2)-9)
}
# set of points
x <- seq(-4, 4, length.out = 20)
y <- poly3(x)
poly2 <- function(x) {
((x^2)-1)(x+3)^3
}
# set of points
x <- seq(-4, 4, length.out = 20)
y <- poly2(x)
poly2 <- function(x) {
((x^2)-1)(x+3)^3
}
# set of points
x <- seq(-4, 4)
y <- poly2(x)
x <- seq(-4, 4, length.out = 20)
y <- poly2(x)
poly2 <- function(x) {
((x^2)-1)((x+3)^3)
}
# set of points
x <- seq(-4, 4, length.out = 20)
y <- poly2(x)
knitr::opts_chunk$set(echo = TRUE)
#f(x) = x^3
poly1 <- function(x) {
x^3
}
# set of points
x <- seq(-4, 4, length.out = 20)
y <- poly1(x)
# graph polynomial
plot(x, y, type = 'l', lwd = 3, col = "#FB7215", las = 1)
abline(h = 0, v = 0, col = '#888888aa', lwd = 1.5)
title(main = expression(paste(f(x), ' = ', x^3)))
#f(x)=(x^2-1)(x+3)^3
poly2 <- function(x) {
((x^2)-1)((x+3)^3)
}
# set of points
x <- seq(-4, 4, length.out = 20)
y <- poly2(x)
View(poly2)
poly3 <- function(x) {
((x^2)-1)((x^2)-9)
}
# set of points
x <- seq(-4, 4, length.out = 20)
y <- poly3(x)
View(poly3)
poly3(2)
#f(x)=(x^2-1)(x+3)^3
poly2 <- function(x) {
((x^2)-1)*((x+3)^3)
}
# set of points
x <- seq(-4, 4, length.out = 20)
y <- poly2(x)
# graph polynomial
plot(x, y, type = 'l', lwd = 3, col = "#FB7215", las = 1)
abline(h = 0, v = 0, col = '#888888aa', lwd = 1.5)
title(main = expression(paste(f(x), ' = ', ((x^2)-1)((x+3)^3))))
poly3 <- function(x) {
((x^2)-1)*((x^2)-9)
}
# set of points
x <- seq(-4, 4, length.out = 20)
y <- poly3(x)
# graph polynomial
plot(x, y, type = 'l', lwd = 3, col = "#FB7215", las = 1)
abline(h = 0, v = 0, col = '#888888aa', lwd = 1.5)
title(main = expression(paste(f(x), ' = ', ((x^2)-1)((x^2)-9))))
install.packages(rgdal)
?rgdal
??rgdal
install.packages(ggmap)
knitr::opts_chunk$set(echo = TRUE)
# dummy dataframe
df1 <- data.frame(percentage = c(20, 40, 15, 15, 10), category = c("A", "B", "C", "D", "E"))
# first to creat a histogram that stacks all percentages on one bin
step1_1 <- ggplot(data = df1, aes(x = "", y = percentage, fill = category)) +
geom_bar(stat = "identity")
library(ggplot2)
# dummy dataframe
df1 <- data.frame(percentage = c(20, 40, 15, 15, 10), category = c("A", "B", "C", "D", "E"))
# first to creat a histogram that stacks all percentages on one bin
step1_1 <- ggplot(data = df1, aes(x = "", y = percentage, fill = category)) +
geom_bar(stat = "identity")
# then convert the cordinate into polar cordinate
step1_2 <- step1_1 + coord_polar(theta = "y")
step1_2
# to eliminate the blank in the middle
step1_3 <- step1_2 + geom_bar(stat = "identity",width = 1)
step1_3
# to move the legend to the top, and add percentage
Percentage_label <- as.vector(df1$category)
Percentage_label <- paste(Percentage_label, "(", df1$percentage, ")", "%")
step1_4 <-  step1_3 + theme(legend.title = element_blank(), legend.position = "top") + scale_fill_discrete(breaks = df1$category, labels = Percentage_label)
step1_4
# to remove the white line around the pie but add to the graph
step1_5 <- step1_4 + theme(axis.text.x = element_blank()) + geom_text(aes(x = 0.9, y = c(90,60,33,17,10), label = Percentage_label), size = 3)
step1_5
getwd
setwd(C:\Users\Xuening\stat133\stat133-hws-fall17\post1)
setwd(\Users\Xuening\stat133\stat133-hws-fall17\post1)
setwd(/Users/Xuening/stat133/stat133-hws-fall17/post1)
setwd("/Users/Xuening/STAT133/stat133-hws-fall17/post1")
remove_missing(x){
na.rm = TRUE
}
remove_missing(x){
print (x,na.rm = TRUE)
}
x <- c(1,2,NA,3)
remove_missing(x){
print(x,na.rm = TRUE)
}
x <- c(1,2,NA,3)
remove_missing(x){
x[!is.na(x)]
}
github <- "https://raw.githubusercontent.com/ucb-stat133/stat133-fall-2017/master/"
datafile <- "data/mobile-food-sf.csv"
download.file(paste0(github, datafile), destfile = "mobile-food-sf.csv")
knitr::opts_chunk$set(echo = TRUE)
library(stringr)
dat <- read.csv('mobile-food-sf.csv', stringsAsFactors = FALSE)
github <- "https://raw.githubusercontent.com/ucb-stat133/stat133-fall-2017/master/"
datafile <- "data/mobile-food-sf.csv"
download.file(paste0(github, datafile), destfile = "mobile-food-sf.csv")
library(stringr)
dat <- read.csv('mobile-food-sf.csv', stringsAsFactors = FALSE)
getwd()
setwd("/Users/Xuening/lab")
setwd("/Users/Xuening/lab")
getwd()
setwd("/Users/Xuening/lab")
library(stringr)
dat <- read.csv('mobile-food-sf.csv', stringsAsFactors = FALSE)
View(dat)
View(dat)
times <- c('12PM', '10AM', '9AM', '8AM')
str_sub(times, start = -2)
times <- c('12PM', '10AM', '9AM', '8AM')
str_sub(times, start = -3)
times <- c('12PM', '10AM', '9AM', '8AM')
str_sub(times, start = -2)
times <- c('12PM', '10AM', '9AM', '8AM')
period <- str_sub(times, start = -2)
hour <- as.numeric(times,1,2)
times <- c('12PM', '10AM', '9AM', '8AM')
period <- str_sub(times, start = -2)
hour <- as.numeric(str_sub(times,start = 1,end = 2))
times <- c('12PM', '10AM', '9AM', '8AM')
period <- str_sub(times, start = -2)
hour <- as.numeric(times)
times <- c('12PM', '10AM', '9AM', '8AM')
periods <- str_sub(times, start = -2)
hours <- as.numeric(str_replace(times, pattern = 'AM|PM', replacement = ''))
times <- c('12PM', '10AM', '9AM', '8AM')
periods <- str_sub(times, start = -2)
if(length(times == 3)){
paste("0",times)
}
#hours <- as.numeric(str_replace(times, pattern = 'AM|PM', replacement = ''))
times <- c('12PM', '10AM', '9AM', '8AM')
periods <- str_sub(times, start = -2)
if(length(times == 3)){
paste("0",times)
}else{
return times
times <- c('12PM', '10AM', '9AM', '8AM')
periods <- str_sub(times, start = -2)
if(length(times == 3)){
paste("0",times)
}
else{
times <- c('12PM', '10AM', '9AM', '8AM')
periods <- str_sub(times, start = -2)
if(length(times == 3)){
paste("0",times,sep = "")
} else{
return times
times <- c('12PM', '10AM', '9AM', '8AM')
periods <- str_sub(times, start = -2)
if(length(times == 3)){
paste("0",times,sep = "")
} else{
}
#hours <- as.numeric(str_replace(times, pattern = 'AM|PM', replacement = ''))
length(times)
times <- c('12PM', '10AM', '9AM', '8AM')
periods <- str_sub(times, start = -2)
length(times[1,])
times <- c('12PM', '10AM', '9AM', '8AM')
periods <- str_sub(times, start = -2)
length(times[1:4])
if(length(times == 3)){
paste("0",times,sep = "")
} else{
}
#hours <- as.numeric(str_replace(times, pattern = 'AM|PM', replacement = ''))
times <- c('12PM', '10AM', '9AM', '8AM')
periods <- str_sub(times, start = -2)
if(length(times) == 3){
paste("0",times,sep = "")
} else{
}
#hours <- as.numeric(str_replace(times, pattern = 'AM|PM', replacement = ''))
times <- c('12PM', '10AM', '9AM', '8AM')
periods <- str_sub(times, start = -2)
if(length(times, use.names = TRUE) == 3){
paste("0",times,sep = "")
} else{
}
times <- c('12PM', '10AM', '9AM', '8AM')
periods <- str_sub(times, start = -2)
if(lengths(times, use.names = TRUE) == 3){
paste("0",times,sep = "")
} else{
}
#hours <- as.numeric(str_replace(times, pattern = 'AM|PM', replacement = ''))
times <- c('12PM', '10AM', '9AM', '8AM')
periods <- str_sub(times, start = -2)
if(lengths(times[times == 3]){
times <- c('12PM', '10AM', '9AM', '8AM')
periods <- str_sub(times, start = -2)
if(lengths(times[times = 3]){
times <- c('12PM', '10AM', '9AM', '8AM')
periods <- str_sub(times, start = -2)
if(lengths(times[times == 3])){
paste("0",times,sep = "")
} else{
}
remove_missing <- function(a){
if(!is.numeric(a)){
stop("the vector is not numeric")
}
return(a[which(!na.rm(a))])
}
#setting working directory
setwd("/Users/Xuening/stat133/stat133-hws-fall17/hw04/code")
# test script
library(testthat)
#source in functions to be tested
source("functions.R")
sink("../output/test-reporter.txt")
test_file("tests.R")
sink()
get_percentile10 <- function(a,na.rm = TRUE){
if (!is.numeric(a)) {
stop("the vector is not numeric")}
if (!na.rm) {
if (anyNA(a)) {
return(NA)
stop()
}
}
b <- remove_missing(a)
b <-  0.1 * get_range(a, na.rm = TRUE) + get_minimum(a, na.rm = TRUE)
return(b)
}
get_percentile90 <- function(a,na.rm = TRUE){
if (!is.numeric(a)) {
stop("the vector is not numeric")}
if (!na.rm) {
if (anyNA(a)) {
return(NA)
stop()
}
}
b <- remove_missing(a)
b <- 0.9 * get_range(a, na.rm = TRUE) + get_minimum(a, na.rm = TRUE)
return(b)
}
get_quartile1 <- function(a, na.rm = TRUE) {
if (!is.numeric(a)) {
stop("the vector is not numeric")}
if (!na.rm) {
if (anyNA(a)) {
return(NA)
stop()
}
}
b <- remove_missing(a)
b <- 0.25 * get_range(a, na.rm = TRUE) + get_minimum(a, na.rm = TRUE)
return(b)
}
get_quartile3 <- function(a, na.rm = TRUE) {
if (!is.numeric(a)) {
stop("the vector is not numeric")}
if (!na.rm) {
if (anyNA(a)) {
return(NA)
stop()
}
}
b <- remove_missing(a)
b <- 0.75 * get_range(a, na.rm = TRUE) + get_minimum(a, na.rm = TRUE)
return(b)
}
#setting working directory
setwd("/Users/Xuening/stat133/stat133-hws-fall17/hw04/code")
# test script
library(testthat)
#source in functions to be tested
source("functions.R")
sink("../output/test-reporter.txt")
test_file("tests.R")
sink()
remove_missing <- function(a){
if(!is.numeric(a)){
stop("the vector is not numeric")
}
return(a[which(!is.na(a))])
}
setwd("/Users/Xuening/stat133/stat133-hws-fall17/hw04/code")
# test script
library(testthat)
#source in functions to be tested
source("functions.R")
sink("../output/test-reporter.txt")
test_file("tests.R")
sink()

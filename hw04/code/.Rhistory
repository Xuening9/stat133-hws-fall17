if (anyNA(a)) {
return(NA)
stop()
}
}
b <- remove_missing(a)
b <-  quantile(b,0.1)
return(b)
}
#get_percentile90()
get_percentile90 <- function(a,na.rm = TRUE){
if (!is.numeric(a)) {
stop("the vector is not numeric")}
if (!na.rm) {
if (anyNA(a)) {
return(NA)
stop()
}
}
b <- remove_missing(a)
b <-  quantile(b,0.9)
return(b)
}
#- get_median()
#- compute the median of the input vector
get_median <- function(a,na.rm = TRUE){
if (!is.numeric(a)) {
stop("the vector is not numeric")}
if (!na.rm) {
if (anyNA(a)) {
return(NA)
stop()
}
}
b <- remove_missing(a)
b <- sort(b)
length_b <- length(b)
if (length_b %% 2 == 1) {
return(b[(length_b + 1) / 2])
} else {
return((b[(length_b / 2)] + temp[(length_temp / 2 + 1)]) / 2)
}
}
#- get_average()
#- compute the average (i.e. mean) of the input vector
get_average <- function(a, na.rm = TRUE) {
if (!is.numeric(a)) {
stop("the vector is not numeric")}
if (!na.rm) {
if (anyNA(a)) {
return(NA)
stop()
}
}
b <- remove_missing(a)
length_b <- length(b)
sum_b <- 0
for (i in 1:length_b) {
sum_b = sum_b + b[i]
}
return(sum_b / length_b)
}
#- get_stdev()
#- compute the standard deviation of the input vector
get_stdev <- function(a, na.rm = TRUE) {
if (!is.numeric(a)) {
stop("the vector is not numeric")}
if (!na.rm) {
if (anyNA(a)) {
return(NA)
stop()
}
}
b <- remove_missing(a)
length_b <- length(b)
sum_diff_sqr <- 0
average_b <- get_average(b)
for (i in 1:length_b) {
sum_diff_sqr = sum_diff_sqr + (b[i] - average_b)^2
}
return(sqrt(sum_diff_sqr / (length_b - 1)))
}
#- get_quartile1()
#- compute the first quartile of the input vector
get_quartile1 <- function(a, na.rm = TRUE) {
if (!is.numeric(a)) {
stop("the vector is not numeric")}
if (!na.rm) {
if (anyNA(a)) {
return(NA)
stop()
}
}
b <- remove_missing(a)
b <- quantile(b, 0.25)
return(b)
}
#- get_quartile3()
#- compute the 3rd quartile of the input vector
get_quartile3 <- function(a, na.rm = TRUE) {
if (!is.numeric(a)) {
stop("the vector is not numeric")}
if (!na.rm) {
if (anyNA(a)) {
return(NA)
stop()
}
}
b <- remove_missing(a)
b <- quantile(b, 0.75)
return(b)
}
#- count_missing()
#- calculates the number of missing values NA
count_missing <- function(a) {
if (!is.numeric(a)) {
stop("the vector is not numeric")}
b <- 0
a_length <- length(a)
for (i in 1:a_length) {
if (is.na(a[i])) {
b = b + 1}
}
return(b)
}
#- summary_stats()
#- returns a list of summary statistics
summary_stats <- function(a) {
summary_a <- list()
summary_a["minimum"] <- get_minimum(a)
summary_a["percent10"] <- get_percentile10(a)
summary_a["quartile1"] <- get_quartile1(a)
summary_a["median"] <- get_median(a)
summary_a["mean"] <- get_average(a)
summary_a["quartile3"] <- get_quartile3(a)
summary_a["percent90"] <- get_percentile90(a)
summary_a["maximum"] <- get_maximum(a)
summary_a["range"] <- get_range(a)
summary_a["stdev"] <- get_stdev(a)
summary_a["missing"] <- count_missing(a)
return(summary_a)
}
#- print_stats()
#- takes a list of summary statistics, and prints the values in a nice format
print_stats <- function(a) {
b <- summary_stats(a)
ret <- ''
for (i in 1:11) {
ret <- paste(ret, format(names(b[i]),
width = 9,
justify = "left"), ": ",
formatC(as.numeric(b[i]),
format = "f", digits = 4,
flag = "0"), '<br/>', sep = "")
}
cat(ret)
return(ret)
}
#- rescale100()
#- compute a rescaled vector with a potential scale from 0 to 100
rescale100 <- function(x, xmin, xmax) {
if (!is.numeric(x)) {
stop("the vector is not numeric")}
if (xmin >= xmax) {
stop("the min is not smaller than the max")
}
b <- rep(0, length(x))
for (i in 1:length(x)) {
b[i] = 100 * (x[i] - xmin) / (xmax - xmin)
}
return(b)
}
#- drop_lowest()
#- returns a vector of length n ??? 1 from a length n vector
#- by dropping the lowest value
drop_lowest <- function(a) {
if (!is.numeric(a)) {
stop("the vector is not numeric")}
if (anyNA(a)) {
stop("NA exists")}
b <- sort(a)
b <- b[2:length(b)]
return(b)
}
#- score_homework()
#- compute a single homework value,return the average of the homework scores
score_homework <- function(a, drop = FALSE) {
if (!is.numeric(a)) {
stop("the vector is not numeric")}
if (anyNA(a)) {
stop()}
b <- a
if (drop) {
b = drop_lowest(a)
}
return(get_average(b))
}
#- score_quiz()
#- compute a single quiz value,return the average of the quiz scores
score_quiz <- function(a, drop = FALSE) {
if (!is.numeric(a)) {
stop("the vector is not numeric")}
if (anyNA(a)) {
stop()}
b <- a
if (drop) {
b = drop_lowest(a)
}
return(get_average(b))
}
#- score_lab()
#- takes a numeric value of lab attendance, and returns the lab score
score_lab <- function(x) {
if (!is.numeric(x)) {
stop("the input is not numeric")}
temp <- 0
if (x == 11 | x == 12) {return(100)}
if (x == 10) {return(80)}
if (x == 9) {return(60)}
if (x == 8) {return(40)}
if (x == 7) {return(20)}
if (x <= 6) {return(0)}
}
sink("../output/summary-rawscores.txt")
str(dat_raw)
for(i in 1:ncol(dat_raw)){
print_stats(dat_raw[ ,i])
}
sink()
get_median <- function(a,na.rm = TRUE){
if (!is.numeric(a)) {
stop("the vector is not numeric")}
if (!na.rm) {
if (anyNA(a)) {
return(NA)
stop()
}
}
b <- remove_missing(a)
b <- sort(b)
length_b <- length(b)
if (length_b %% 2 == 1) {
return(b[(length_b + 1) / 2])
} else {
return((b[(length_b / 2)] + b[(length_b / 2 + 1)]) / 2)
}
}
sink("../output/summary-rawscores.txt")
str(dat_raw)
for(i in 1:ncol(dat_raw)){
print_stats(dat_raw[ ,i])
}
sink()
for(i in 1:ncol(dat_raw)){
dat_raw[is.na(dat_raw[ ,i]),i] <- 0
}
View(dat_raw)
View(dat_raw)
dat_raw$QZ1 <- rescale100(dat_raw$QZ1,0,12)
dat_raw$QZ2 <- rescale100(dat_raw$QZ2,0,18)
dat_raw$QZ3 <- rescale100(dat_raw$QZ3,0,20)
dat_raw$QZ4 <- rescale100(dat_raw$QZ4,0,20)
dat_raw2 <- mutate(dat_raw,
Test1 = rescale100(dat_raw$EX1,0,80),
Test2 = rescale100(dat_raw$EX2,0,90)
)
View(dat_raw2)
View(dat2)
View(dat_raw2)
HW <- c(dat_raw$HW1,dat_raw$HW2,dat_raw$HW3,dat_raw$HW4,dat_raw$HW5,
dat_raw$HW6,dat_raw$HW7,dat_raw$HW8,dat_raw$HW9)
dat_raw$HW1,dat_raw$HW2,dat_raw$HW3,dat_raw$HW4,dat_raw$HW5,
dat_raw$HW6,dat_raw$HW7,dat_raw$HW8,dat_raw$HW9
View(dat_raw)
Test1 <-  rescale100(dat_raw$EX1,0,80)
Test2 <-  rescale100(dat_raw$EX2,0,90)
View(dat_raw)
for(i in 1:334){
Hw[i,1] <- score_homework(dat_raw[i,1:9],drop = TRUE)
}
for(i in 1:334){
Hw <- score_homework(dat_raw[i,1:9],drop = TRUE)
}
for(i in 1:334){
Hw[i] <- score_homework(c(dat_raw[i,1:9]),drop = TRUE)
}
hw[1] <- c(dat_raw[1,1:9])
hw <- c(dat_raw[1,1:9])
hw <- as.numeric(c(dat_raw[1,1:9]))
for(i in 1:334){
Hw[i] <- score_homework(as.numeric(c(dat_raw[i,1:9])),drop = TRUE)
}
for(i in 1:334){
Hw <- score_homework(as.numeric(c(dat_raw[i,1:9])),drop = TRUE)
}
Hw[i] <- score_homework(as.numeric(c(dat_raw[i,1:9])),drop = TRUE)
HW
HW[2]
lenght(HW)
length(HW)
HW[i] <- score_homework(as.numeric(c(dat_raw[i,1:9])),drop = TRUE)
for(i in 1:334){
HW[i] <- score_homework(as.numeric(c(dat_raw[i,1:9])),drop = TRUE)
}
HW[2]
for(i in 1:334){
HW[i] <- score_homework(as.vector(c(dat_raw[i,1:9])),drop = TRUE)
}
for(i in 1:334){
HW[i] <- score_homework(as.vector(dat_raw[i,1:9]),drop = TRUE)
}
for(i in 1:334){
HW[i] <- score_homework(as.numeric(dat_raw[i,1:9]),drop = TRUE)
}
HW[2]
HW[2]
HW[3]
HW[335]
for(i in 1:334){
Homework[i] <- score_homework(as.numeric(dat_raw[i,1:9]),drop = TRUE)
}
for(i in 1:334){
Homework <- ""
Homework[i] <- score_homework(as.numeric(dat_raw[i,1:9]),drop = TRUE)
}
Homework[2]
as.numeric(dat_raw[1,1:9])
as.numeric(dat_raw[2,1:9])
Homework[1]
for(i in 1:334){
Homework <- as.vector()
Homework[i] <- score_homework(c(as.numeric(dat_raw[i,1:9])),drop = TRUE)
}
for(i in 1:334){
Homework[i] <- score_homework(c(as.numeric(dat_raw[i,1:9])),drop = TRUE)
}
for(i in 1:334){
Homework[i] <- score_homework(c(as.numeric(dat_raw[i,1:9])),drop = TRUE)
Homework <- as.vector(Homework)
}
for(i in 1:334){
Homework[i] <- score_homework(c(as.numeric(dat_raw[i,1:9])),drop = TRUE)
Homework <- as.numeric(Homework)
}
for(i in 1:334){
Quiz[i] <- score_quiz(c(as.numeric(dat_raw[i,11:14])),drop = TRUE)
Quiz <- as.numeric(Quiz)
}
Quiz[i] <- score_quiz(c(as.numeric(dat_raw[i,11:14])),drop = TRUE)
for(i in 1:334){
Quiz[i] <- score_quiz(c(as.numeric(dat_raw[i,11:14])),drop = TRUE)
#Quiz <- as.numeric(Quiz)
}
Quiz[i]
for(i in 1:334){
Homework[i] <- score_homework(c(as.numeric(dat_raw[i,1:9])),drop = TRUE)
Homework <- as.numeric(Homework)
}
Homework <- list(NA)
for(i in 1:334){
Homework[i] <- score_homework(c(as.numeric(dat_raw[i,1:9])),drop = TRUE)
Homework <- as.numeric(Homework)
}
Quiz <- list(NA)
for(i in 1:334){
Quiz[i] <- score_quiz(c(as.numeric(dat_raw[i,11:14])),drop = TRUE)
#Quiz <- as.numeric(Quiz)
}
for(i in 1:334){
Quiz[i] <- score_quiz(c(as.numeric(dat_raw[i,11:14])),drop = TRUE)
Quiz <- as.numeric(Quiz)
}
Lab <- score_lab(dat_raw$ATT)
score_lab <- function(x) {
if (!is.numeric(x)) {
stop("the input is not numeric")}
if (x == 11 | x == 12) {return(100)}
if (x == 10) {return(80)}
if (x == 9) {return(60)}
if (x == 8) {return(40)}
if (x == 7) {return(20)}
if (x <= 6) {return(0)}
}
Lab <- score_lab(dat_raw$ATT)
score_lab <- function(x) {
if (!is.numeric(x)) {
stop("the input is not numeric")}
b <- rep(0,length(x))
for(i in 1:length(x)){
if (x[i] == 11 | x[i] == 12) {b[i] <- 100}
if (x[i] == 10) {b[i] <- 80}
if (x[i] == 9) {b[i] <- 60}
if (x[i] == 8) {b[i] <- 40}
if (x[i] == 7) {b[i] <- 20}
if (x[i] <= 6) {b[i] <- 0}
}
return(b)
}
Lab <- score_lab(dat_raw$ATT)
Overall <- List(NA)
for(i in 1:334){
Overall[i] <- ((0.1*Lab[i])+
0.3*Homework[i]+
0.15*Quiz[i]+
0.2*Test1[i]+
0.25*Test2[i] )
Overall <- round(as.numeric(Overall),4)
Overall <- rescale100(Overall,0,100)
}
Overall <- list(NA)
for(i in 1:334){
Overall[i] <- ((0.1*Lab[i])+
0.3*Homework[i]+
0.15*Quiz[i]+
0.2*Test1[i]+
0.25*Test2[i] )
Overall <- round(as.numeric(Overall),4)
Overall <- rescale100(Overall,0,100)
}
#- score_grade()
#- takes a numeric value of overall grade and returns into letters grade
score_grade <- function(x){
if (!is.numeric(x)) {
stop("the input is not numeric")}
b <- rep(0,length(x))
for(i in 1:length(x)){
if (x[i] < 50) {b[i] <- "F"}
if (x[i] < 60) {b[i] <- "D"}
if (x[i] < 70) {b[i] <- "C-"}
if (x[i] < 77.5) {b[i] <- "C"}
if (x[i] < 79.5) {b[i] <- "C+"}
if (x[i] < 82) {b[i] <- "B-"}
if (x[i] < 86) {b[i] <- "B"}
if (x[i] < 88) {b[i] <- "B+"}
if (x[i] < 90) {b[i] <- "A-"}
if (x[i] < 95) {b[i] <- "A"}
else{b[i] <- "A+"}
}
return(b)
}
Grade <- score_grade(Overall)
#add a variable Overall
Overall <- ((0.1*Lab)+(0.3*Homework[i])+(0.15*Quiz[i])+
(0.2*Test1[i])+(0.25*Test2[i]))
Overall <- round(as.numeric(Overall),4)
Overall <- rescale100(Overall,0,100)
Overall <- ((0.1*Lab)+(0.3*Homework[i])+(0.15*Quiz[i])+
(0.2*Test1[i])+(0.25*Test2[i]))
Overall <- rescale100(Overall,0,100)
dat_raw2 <- mutate(dat_raw,Test1,Test2,Homework,Quiz,Overall,Grade)
View(dat_raw2)
Overall <- ((0.1*Lab)+(0.3*Homework)+(0.15*Quiz)+
(0.2*Test1)+(0.25*Test2))
Overall <- rescale100(Overall,0,100)
Grade <- score_grade(Overall)
dat_raw2 <- mutate(dat_raw,Test1,Test2,Homework,Quiz,Overall,Grade)
View(dat_raw2)
View(dat1)
View(durant)
Grade <- score_grade(Overall)
score_grade <- function(x){
if (!is.numeric(x)) {
stop("the input is not numeric")}
b <- rep(0,length(x))
for(i in 1:length(x)){
if (x[i] < 50) {b[i] <- "F"}
else if (x[i] < 60) {b[i] <- "D"}
else if (x[i] < 70) {b[i] <- "C-"}
else if (x[i] < 77.5) {b[i] <- "C"}
else if (x[i] < 79.5) {b[i] <- "C+"}
else if (x[i] < 82) {b[i] <- "B-"}
else if (x[i] < 86) {b[i] <- "B"}
else if (x[i] < 88) {b[i] <- "B+"}
else if (x[i] < 90) {b[i] <- "A-"}
else if (x[i] < 95) {b[i] <- "A"}
else{b[i] <- "A+"}
}
return(b)
}
Grade <- score_grade(Overall)
dat_raw2 <- mutate(dat_raw,Test1,Test2,Homework,Quiz,Overall,Grade)
dat_raw2 <- mutate(dat_raw,Test1,Test2,Homework,Quiz,Lab,Overall,Grade)
sink("../output/Lab-stats.txt")
print_stats(dat_raw2[ ,"Lab"])
sink()
sink("../output/Homework-stats.txt")
print_stats(dat_raw2[ ,"Homework"])
sink()
sink("../output/Quiz-stats.txt")
print_stats(dat_raw2[ ,"Quiz"])
sink()
sink("../output/Test1-stats.txt")
print_stats(dat_raw2[ ,"Test1"])
sink()
sink("../output/Test2-stats.txt")
print_stats(dat_raw2[ ,"Test2"])
sink()
sink("../output/Overall-stats.txt")
print_stats(dat_raw2[ ,"Overall"])
sink()
sink("../output/summary-cleanscores.txt")
str(dat_raw2)
sink()
write.cvs(dat_raw2, file = '../data/cleandata/cleanscores.csv',row.names=FALSE)
write.csv(dat_raw2, file = '../data/cleandata/cleanscores.csv',row.names=FALSE)
runApp('C:/Users/Xuening/stat133/stat133-hws-fall17/hw04/app/gradevis/gradevis.R')
getwd
getwd()
runApp('C:/Users/Xuening/stat133/stat133-hws-fall17/hw04/app/gradevis.R')
install.packages('shiny')
install.packages("shiny")
library(shiny); runApp('C:/Users/Xuening/stat133/stat133-hws-fall17/hw04/app/gradevis.R')
